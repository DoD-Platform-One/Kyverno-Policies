# Overrides for all policies.  Blank values indicate to use the policy-specific value or the default value

# -- Enable policy deployments
enabled: true

# -- Override all policies' validation failure action with "audit" or "enforce".  If blank, uses policy setting.
validationFailureAction: ""

# -- Override all policies' time to wait for admission webhook to respond.  If blank, uses policy setting or default (10).  Range is 1 to 30.
webhookTimeoutSeconds: ""

# -- Adds an exclusion to all policies.  This is merged with any policy-specific excludes.
exclude: {}

# -- Additional labels to apply to all policies.
customLabels: {}

# webhookTimeoutSecond: can be added to any policy to override the timeout for that policy
# match: can be added to any policy to completely override selection of resources by the policy
# exclude: can be added to any policy to add specific exclusions to the policy
# See https://kyverno.io/docs/writing-policies/match-exclude on how to format match/exclude

# -- Controls for the job that will wait for all policies to be ready.  This can be used with Helm's --wait-for-jobs to wait for all policies to be ready.
waitforready:
  # -- Controls wait for ready deployment
  enabled: true
  # -- Image to use in wait for ready job.  This must contain kubectl.
  image:
    repository: registry1.dso.mil/ironbank/opensource/kubernetes-1.21/kubectl
    tag: v1.21.5
  # -- Pull secret for wait for ready job
  imagePullSecrets: []

# -- Policies
policies:
  # Keep policies in alphabetical order and name them the same as the .yaml file to help with configuration and troubleshooting

  # -- Sample policy showing values that can be added to any policy
  sample:
    # -- Controls policy deployment
    enabled: false
    # -- Controls if a validation policy rule failure should disallow (enforce) or allow (audit) the admission
    validationFailureAction: audit # or enforce
    # -- Specifies the maximum time in seconds allowed to apply this policy. Default is 10. Range is 1 to 30.
    webhookTimeoutSeconds: ""
    # -- Defines when this policy's rules should be applied.  This completely overrides any default matches.
    match: {}
    # -- Defines when this policy's rules should not be applied.  This completely overrides any default excludes.
    exclude: {}
    # -- Policy specific parameters that are added to the configMap for the policy rules
    parameters: {}

  # -- Clone existing configMap or secret in new Namespaces
  clone-configs:
    enabled: false
    parameters:
      # -- ConfigMap or Secrets that should be cloned
      sourceObjects: {}
        # # -- Name of the resource
        # sample:
        #   # -- Kind of the resource (ConfigMap or Secret)
        #   kind: ConfigMap
        #   # -- Namespace to find the resource
        #   namespace: default

  # -- Mitigates log4j2 vulnerability (CVE-2021-44228) for library versions >= 2.10
  cve-add-lo4j2-mitigation:
    enabled: false  # See https://github.com/kyverno/kyverno/issues/2865 (Fixed in v1.5.3)

  # -- Mitigates Services with External IPs vulnerability (CVE-2020-8554)
  cve-restrict-external-ips:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of external IPs allowed in services
      allowedValues: []

  # -- Mitigates Services with External Names vulnerability (CVE-2020-8554)
  cve-restrict-external-names:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of external names allowed in services.  Must be a lowercase FRC-1123 hostname.
      allowedValues: []

  # -- Prevents deployment of pods into the default namespace
  disallow-default-namespace:
    enabled: true
    validationFailureAction: audit

  # -- Checks for resource APIs in use that will be removed in Kubernetes 1.22 or 1.25
  disallow-deprecated-apis:
    enabled: true
    validationFailureAction: audit

  # -- Disallow use of the host namespace (PID, IPC, Network) by pods
  disallow-host-namespaces:
    enabled: true
    validationFailureAction: enforce

  # -- Disallow hostpath volumes
  disallow-host-path:
    enabled: true
    validationFailureAction: enforce

  # -- Disallow services of type NodePort
  disallow-nodeport-services:
    enabled: true
    validationFailureAction: audit

  # -- Disallows pods that allow privilege escalation
  disallow-privilege-escalation:
    enabled: true
    validationFailureAction: audit

  # -- Disallow containers that run as privileged
  disallow-privileged-containers:
    enabled: true
    validationFailureAction: enforce

  # -- Disallow additional permissions on default service accounts
  disallow-rbac-on-default-serviceaccounts:
    enabled: true
    validationFailureAction: enforce

  # -- Replaces an existing image registry with a new registry in containers (e.g. proxy)
  replace-image-registry:
    enabled: false
    parameters:
      # -- List of registries to replace
      replacements: []
      # - old: "registry.to.replace"
      #   new: "new.registry.to.use"

  # -- Requires containers to drop all Linux capabilities
  require-drop-all-capabilities:
    enabled: true
    validationFailureAction: audit

  # -- Require specified labels to be on all pods
  require-labels:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of labels required on all pods
      # See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/#labels
      # See https://helm.sh/docs/chart_best_practices/labels/#standard-labels
      requiredValues:
      - app.kubernetes.io/name
      - app.kubernetes.io/instance
      - app.kubernetes.io/version

  # -- Require containers to run with non root group
  require-non-root-group:
    enabled: true
    validationFailureAction: audit

  # -- Require containers to run as non root user
  require-non-root-user:
    enabled: true
    validationFailureAction: audit

  # -- Require specified probes on pods
  require-probes:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- List of probes that are required on pods
      requiredValues: ["readinessProbe", "livenessProbe"]

  # -- Require CPU and memory requests to equal limits so guaranteed quality of service is applied
  require-requests-equal-limits:
    enabled: false
    validationFailureAction: audit

  # -- Require all containers have CPU and memory limits specified
  require-resource-limits:
    enabled: true
    validationFailureAction: audit

  # -- Require containers mount hostPath volumes as read-only.  HostPath volumes are normally disallowed.  But, if exceptions are made, the volume should be mounted as read-only.
  require-ro-host-path:
    enabled: true
    validationFailureAction: enforce

  # -- Require containers set root filesystem to read-only
  require-ro-rootfs:
    enabled: true
    validationFailureAction: audit

  # -- Restricts pods that use AppArmor to specified profiles
  # Iron Bank containers are either distroless or RHEL UBI.  Neither of these uses AppArmor
  restrict-apparmor:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- List of allowed AppArmor profiles
      allowedValues: ["runtime/default"]

  # -- *Disallow pods from automatically mounting the default service account
  restrict-automount-sa-token:
    enabled: false
    validationFailureAction: audit
    #TODO: Should this be a mutate?

  # -- Restrict Linux capabilities that are allowed to be added in containers
  restrict-capabilities:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- List of capabilities that are allowed to be added
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
      allowedValues:
      - NET_BIND_SERVICE

  # -- *NEW
  restrict-controlplane-scheduling:
    enabled: false
    validationFailureAction: audit

  # -- Restrict container group IDs to allowed ranges
  # NOTE: Using require-non-root-group will force runAsGroup to be defined
  restrict-group-id:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- Allowed group IDs / ranges.  The following operators are valid: >, <, >=, <=, !, |, &.
      # For a lower and upper limit, use ">=min & <=max"
      allowedValues: [">=1000"]

  # -- Restrict hostPath volume paths to the allowed list.  HostPath volumes are normally disallowed.  But, if exceptions are made, the path should be restricted.
  restrict-host-path:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed paths for hostPath volumes
      allowedValues: []

  # -- Restrict containers using host ports to the allowed list
  restrict-host-ports:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed host ports
      allowedValues: []

  # -- Restricts container images to registries in approved list
  restrict-image-registries:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed registries that images may use
      allowedValues: ["registry1.dso.mil"]

  # -- Restricts container image tags based on blacklist
  restrict-image-tags:
    enabled: true
    validationFailureAction: enforce
    parameters:
      disallowedValues: ["latest"]

  # -- Restrict container's use of procMount to the allowed list
  restrict-proc-mount:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed proc mount values
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards
      allowedValues: ["Default"]

  # -- Restrict the seccomp profiles that containers can use to the allowed list
  restrict-seccomp:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- List of allowed seccomp profiles
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
      allowedValues:
      - RuntimeDefault
      - Localhost

  # -- Restrict the use of any SELinux options.  Only `level` and `type` are allowed.  `Type` must be in the allowed list
  restrict-selinux:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed values for the `type` field
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards
      allowedValues:
      - container_t
      - container_init_t
      - container_kvm_t

  # -- Restrict allowed sysctls to only items in the allowed list
  restrict-sysctls:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed sysctls.
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards
      allowedValues:
      - kernel.shm_rmid_forced
      - net.ipv4.ip_local_port_range
      - net.ipv4.ip_unprivileged_port_start
      - net.ipv4.tcp_syncookies
      - net.ipv4.ping_group_range

  # -- Restrict container user IDs to allowed ranges
  # NOTE: Using require-non-root-user will force runAsUser to be defined
  restrict-user-id:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- Allowed user IDs / ranges.  The following operators are valid: >, <, >=, <=, !, |, &.
      # For a lower and upper limit, use ">=min & <=max"
      allowedValues: [">=1000"]

  # -- Restrict the volume types allowed in containers
  restrict-volume-types:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed Volume types
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
      allowedValues:
      - "configMap"
      - "csi"
      - "downwardAPI"
      - "emptyDir"
      - "ephemeral"
      - "persistentVolumeClaim"
      - "projected"
      - "secret"

  # -- *NEW:
  verify-image:
    enabled: false
    validationFailureAction: audit

#TODO: Add restricted taints policy
#TODO: Add Namespaces have Istio policy
#TODO: Add annotation check for pods for "sidecar.istio.io/inject: false"
#TODO: Add No Big Containers policy
#TODO: HTTPS only ingress for istio
#TODO: Add policy to make sure ingress hosts are unique for Istio (or maybe not since its ok to overlap if you are using different ingress gateways)
#TODO: Prevent user exec or attach to pods

# -- Adds custom policies.  See https://kyverno.io/docs/writing-policies/.
additionalPolicies:
  # -- Name of the policy.  Addtional policies can be added by adding a key.
  samplePolicy:
    # -- Controls policy deployment
    enabled: false
    # -- Kind of policy.  Currently, "ClusterPolicy" and "Policy" are supported.
    kind: ClusterPolicy
    # -- If kind is "Policy", which namespace to target.  The namespace must already exist.
    namespace: ""
    # -- Policy annotations to add
    annotations:
      # -- Human readable name of policy
      policies.kyverno.io/title: Sample Policy
      # -- Category of policy.  Arbitrary.
      policies.kyverno.io/category: Examples
      # -- Severity of policy if a violation occurs.  Choose "critical", "high", "medium", "low".
      policies.kyverno.io/severity: low
      # -- Type of resource policy applies to (e.g. Pod, Service, Namespace)
      policies.kyverno.io/subject: Pod
      # -- Description of what the policy does, why it is important, and what items are allowed or unallowed.
      policies.kyverno.io/description: >-
        This sample policy blocks pods from deploying into the 'default' namespace.
    # -- Policy specification.  See `kubectl explain clusterpolicies.spec`
    spec:
      # -- Policy rules.  At least one is required
      rules:
      - name: sample-rule
        match:
          any:
          - resources:
              kinds:
              - Pods
        validate:
          message: "Using 'default' namespace is not allowed."
          pattern:
            metadata:
              namespace: "!default"

bbtests:
  enabled: false
  scripts:
    image: registry1.dso.mil/ironbank/opensource/kubernetes-1.21/kubectl:v1.21.5
    envs:
      ENABLED_POLICIES: '{{ $p := list }}{{ range $k, $v := .Values.policies }}{{ if $v.enabled }}{{ $p = append $p $k }}{{ end }}{{ end }}{{ join " " $p }}'
      IMAGE_PULL_SECRET: '{{ .Values.bbtests.imagePullSecret }}'
    additionalVolumeMounts:
      - name: "kyverno-policies-bbtest-manifests"
        mountPath: /yaml
      - name: "kyverno-policies-bbtest-kube-cache"
        mountPath: /.kube/cache
    additionalVolumes:
      - name: "kyverno-policies-bbtest-manifests"
        configMap:
          name: "kyverno-policies-bbtest-manifests"
      - name: "kyverno-policies-bbtest-kube-cache"
        emptyDir: {}
  imagePullSecret: private-registry