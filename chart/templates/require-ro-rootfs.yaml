{{- $name := "require-ro-rootfs" }}
{{- $failureAction := default (dig $name "validationFailureAction" nil .Values.policies) .Values.validationFailureAction }}
{{- if and .Values.enabled (dig $name "enabled" false .Values.policies) }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ $name }}
  annotations:
    {{- include "kyverno-policies.annotations" . | nindent 4 }}
    {{- with .Values.autogenControllers }}
    pod-policies.kyverno.io/autogen-controllers: {{ . }}
    {{- end }}
    policies.kyverno.io/title: Require Read-Only Root Filesystem
    policies.kyverno.io/category: Best Practices (Security)
    policies.kyverno.io/severity: {{ default "medium" (dig $name "severity" nil .Values.policies) }}
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      A read-only root file system helps to enforce an immutable infrastructure strategy.
      Containers should only need to write to mounted volumes that persist state or cache data.
      An immutable root filesystem can also prevent malicious binaries from writing to the
      host system. This policy validates that containers define a securityContext
      with `readOnlyRootFilesystem: true`.
  labels: {{- include "kyverno-policies.labels" . | nindent 4 }}
spec:
  {{- include "kyverno-policies.webhookTimeoutSeconds" (merge (dict "name" $name) .) | indent 2 }}
  validationFailureAction: {{ $failureAction }} 
  background: {{ .Values.background }}
  failurePolicy: {{ default .Values.failurePolicy (include "setFailurePolicy" $failureAction) }}
  rules:
  - name: validate-readOnlyRootFilesystem
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) .) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) .) | nindent 4 }}
    {{- with index .Values "policyPreconditions" $name }}
    preconditions:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    validate:
      message: >-
        Container must set spec.containers[*].securityContext.readOnlyRootFilesystem and
        spec.initContainers[*].securityContext.readOnlyRootFilesystem to true.
      {{- include "kyverno-policies.excludeContainers" (merge (dict "name" $name) .) | nindent 6 }}
            pattern:
              securityContext:
                readOnlyRootFilesystem: true
{{- end -}}
