{{- $name := "update-automountserviceaccounttokens" }}
{{- if and .Values.enabled (dig $name "enabled" false .Values.policies) }}
{{- $serviceAccountPoliciesExist := false }}
{{- $podsAllowPoliciesExist := false }}
{{- $podsDenyPoliciesExist := false }}
{{- range $v := (dig $name "namespaces" nil .Values.policies) }}
  {{- if hasKey . "serviceAccounts" }}
    {{- $serviceAccountPoliciesExist = true }}
  {{- end}}
  {{- if hasKey . "pods" }}
    {{- if hasKey .pods "allow" }}
      {{- $podsAllowPoliciesExist = true }}
    {{- end}}
    {{- if hasKey .pods "deny" }}
      {{- $podsDenyPoliciesExist = true }}
    {{- end}}
  {{- end}}
{{- end }}
{{- if or $serviceAccountPoliciesExist $podsAllowPoliciesExist $podsDenyPoliciesExist }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ $name }}
  annotations:
    policies.kyverno.io/title: Disable automountServiceAccountToken
    policies.kyverno.io/category: Other, EKS Best Practices
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: ServiceAccount
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.21"
    policies.kyverno.io/description: >-
      By default, Kubernetes automatically provisions a service account when creating a Pod
      and mounts the accountâ€™s secret token within the Pod at runtime. Many containerized
      applications do not require direct access to the service account as Kubernetes
      orchestration occurs transparently in the background. If an application is compromised,
      account tokens in Pods can be gleaned by cyber actors and used to further compromise
      the cluster. 
      
      When an application does not need to access the service account directly,
      Kubernetes administrators should ensure that Pod specifications disable the secret
      token being mounted. 

      This policy contains three rules, one that applies to the serviceaccount to disable 
      automounting the token and another two rules that apply to the pod that will 
      override the serviceaccount setting because the pod truly needs or doesn't need access to the API.
      
      NOTE that the default serviceaccount is not included here and must mutated differently
spec:
  rules:
  - name: disables-serviceaccounts
    exclude:
      any:
      - resources:
          kinds:
          - ServiceAccount
          names:
            - "default"
    match:
      any:
     {{- range $v := (dig $name "namespaces" nil .Values.policies) }}
      - resources:
          kinds:
          - ServiceAccount
          namespaces:
          - {{ .namespace }}
          names:
          {{- range .serviceAccounts }}
          - {{ . }}
          {{- end }}
     {{- end }}
    mutate:
      patchStrategicMerge:
        automountServiceAccountToken: false
  {{- end}}
  {{- if $podsAllowPoliciesExist }}
  - name: enable-pods
    match:
      any:
      {{- range $v := (dig $name "namespaces" nil .Values.policies) }}
      {{- if (dig "pods" "allow" false .)  }}
      - resources:
          kinds:
          - Pod
          namespaces:
          - {{ .namespace }}
          names:
          {{- range .pods.allow }}
          - {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}    
    mutate:
      patchStrategicMerge:
        spec:
          automountServiceAccountToken: true
  {{- end }}
  {{- if $podsDenyPoliciesExist }}
  - name: disable-pods
    match:
      any:
      {{- range $v := (dig $name "namespaces" nil .Values.policies) }}
      {{- if (dig "pods" "deny" false .)  }}
      - resources:
          kinds:
          - Pod
          namespaces:
          - {{ .namespace }}
          names:
          {{- range .pods.deny }}
          - {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}    
    mutate:
      patchStrategicMerge:
        spec:
          automountServiceAccountToken: false
  {{- end }}
  {{- if $podsAllowPoliciesExist }}
  - name: enable-statefulset-and-deployments
    match:
      any:
      {{- range $v := (dig $name "namespaces" nil .Values.policies) }}
      {{- if (dig "pods" "allow" false .)  }}
      - resources:
          kinds:
          - StatefulSet
          - Deployment
          namespaces:
          - {{ .namespace }}
          names:
          {{- range .pods.allow }}
          - {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}    
    mutate:
      patchStrategicMerge:
        spec:
          template:
            spec:
              automountServiceAccountToken: true
  {{- end }}
  {{- if $podsDenyPoliciesExist }}
  - name: disable-statefulsets-and-deployments
    match:
      any:
      {{- range $v := (dig $name "namespaces" nil .Values.policies) }}
      {{- if (dig "pods" "deny" false .)  }}
      - resources:
          kinds:
          - StatefulSet
          - Deployment
          namespaces:
          - {{ .namespace }}
          names:
          {{- range .pods.deny }}
          - {{ . }}
          {{- end }}
      {{- end }}
      {{- end }}    
    mutate:
      patchStrategicMerge:
        spec:
          template:
            spec:
              automountServiceAccountToken: false
  {{- end }}
---
{{- if $podsAllowPoliciesExist}}
apiVersion: kyverno.io/v2alpha1
kind: PolicyException
metadata:
  name: disable-automountserviceaccounttokens-exceptions
  namespace: kyverno
spec:
  exceptions:
  - policyName: disallow-auto-mount-service-account-token
    ruleNames:
    - automount-pods
  match:
    any:
    {{- range $v := (dig $name "namespaces" nil .Values.policies) }}
    {{- if (dig "pods" "allow" false .)  }}
    - resources:
        kinds:
        - Pod
        - Deployment
        - StatefulSet
        namespaces:
        - {{ .namespace }}
        names:
        {{- range .pods.allow }}
        - {{ . }}
        {{- end }}
    {{- end }}
    {{- end }}
{{- end }}
{{- end }}
