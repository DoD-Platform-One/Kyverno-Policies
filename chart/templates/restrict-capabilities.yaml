{{- $name := "restrict-capabilities" }}
{{- $failureAction := default (dig $name "validationFailureAction" nil .Values.policies) .Values.validationFailureAction }}
{{- if and .Values.enabled (dig $name "enabled" false .Values.policies) }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ $name }}
  annotations:
    {{- with .Values.autogenControllers }}
    pod-policies.kyverno.io/autogen-controllers: {{ . }}
    {{- end }}
    policies.kyverno.io/title: Restrict Capabilities
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: {{ default "high" (dig $name "severity" nil .Values.policies) }}
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Adding capabilities is a way for containers in a Pod to request higher levels
      of ability than those with which they may be provisioned. Many capabilities
      allow system-level control and should be prevented. This policy checks
      ephemeralContainers, initContainers, and containers to ensure the only
      capabilities that are added are those in the allowed list (.values.policies.restrict-capabilities.parameters.allow).
  labels: {{- include "kyverno-policies.labels" . | nindent 4 }}
spec:
  {{- include "kyverno-policies.webhookTimeoutSeconds" (merge (dict "name" $name) .) | indent 2 }}
  validationFailureAction: {{ $failureAction }} 
  background: {{ .Values.background }}
  failurePolicy: {{ default .Values.failurePolicy (include "setFailurePolicy" $failureAction) }}
  rules:
  - name: capabilities
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) .) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) .) | nindent 4 }}
    {{- with index .Values "policyPreconditions" $name }}
    preconditions:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    validate:
      message: >-
        Adding of additional capabilities beyond the allowed set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add,
        spec.initContainers[*].securityContext.capabilities.add, and
        spec.ephemeralContainers[*].securityContext.capabilities.add must be in the allowed list.
      {{- include "kyverno-policies.excludeContainers" (merge (dict "name" $name) .) | nindent 6 }}
            deny:
              conditions:
                all:
                - key: "{{ "{{" }} element.securityContext.capabilities.add[] {{ "}}" }}"
                  operator: AnyNotIn
                  value: 
                  {{- range (dig $name "parameters" "allow" (list) .Values.policies) }}
                  - {{ . }}
                  {{- end }}
{{- end -}}
