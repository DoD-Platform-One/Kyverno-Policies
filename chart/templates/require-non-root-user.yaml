{{- $name := "require-non-root-user" }}
{{- $failureAction := default (dig $name "validationFailureAction" nil .Values.policies) .Values.validationFailureAction }}
{{- if and .Values.enabled (dig $name "enabled" false .Values.policies) }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ $name }}
  annotations:
    {{- with .Values.autogenControllers }}
    pod-policies.kyverno.io/autogen-controllers: {{ . }}
    {{- end }}
    policies.kyverno.io/title: Reqire Non-root User
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: {{ default "high" (dig $name "severity" nil .Values.policies) }}
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Following the least privilege principle, containers should not be run as root. This policy ensures
      containers either have `runAsNonRoot` set to `true` or `runAsUser` > 0.
  labels: {{- include "kyverno-policies.labels" . | nindent 4 }}
spec:
  {{- include "kyverno-policies.webhookTimeoutSeconds" (merge (dict "name" $name) .) | indent 2 }}
  validationFailureAction: {{ $failureAction }}
  background: {{ .Values.background }}
  failurePolicy: {{ default .Values.failurePolicy (include "setFailurePolicy" $failureAction) }}
  rules:
  - name: non-root-user
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) .) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) .) | nindent 4 }}
    {{- with index .Values "policyPreconditions" $name }}
    preconditions:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    validate:
      message: >-
        Either `runAsNonRoot` must be set to true or `runAsUser` must be > 0 in
        spec.securityContext or (spec.containers[*].securityContext,
        spec.initContainers[*].securityContext, and spec.ephemeralContainers[*].securityContext)
      foreach:
      - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
        preconditions:
          all:
          {{- include "kyverno-policies.excludeContainersPrecondition" (merge (dict "name" $name "operator" "AnyIn") .) | nindent 4 }}
        pattern:
          =(securityContext):
            =(runAsUser): "*"
            =(runAsNonRoot): "*"
      - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
        preconditions:
          any:
          - key: "{{`{{ request.object.spec.securityContext.runAsUser || to_number('0') }}`}}"
            operator: NotEquals
            value: 0
          - key: "{{`{{ request.object.spec.securityContext.runAsNonRoot || '0' == '1' }}`}}" # 0 == 1 evaluates to false, avoids escaping jsmepath literal bool
            operator: Equals
            value: true
          all:
          {{- include "kyverno-policies.excludeContainersPrecondition" (merge (dict "name" $name "operator" "AnyNotIn") .) | nindent 4 }}
        pattern:
          =(securityContext):
            =(runAsUser): ">0"
            =(runAsNonRoot): "!false"
      - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
        preconditions:
          all:
          - key: "{{`{{ request.object.spec.securityContext.runAsUser || to_number('0') }}`}}"
            operator: Equals
            value: 0
          - key: "{{`{{ request.object.spec.securityContext.runAsNonRoot || '0' == '1' }}`}}" # 0 == 1 evaluates to false, avoids escaping jsmepath literal bool
            operator: NotEquals
            value: true
          {{- include "kyverno-policies.excludeContainersPrecondition" (merge (dict "name" $name "operator" "AnyNotIn") .) | nindent 4 }}
        anyPattern:
        - securityContext:
            runAsNonRoot: true
        - securityContext:
            runAsUser: ">0"
{{- end -}}
